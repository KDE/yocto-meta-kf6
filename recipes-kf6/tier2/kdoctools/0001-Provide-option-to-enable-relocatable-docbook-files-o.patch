From 2e594069293fad283d47668823c66184318278f5 Mon Sep 17 00:00:00 2001
<From: Andreas Cord-Landwehr <cordlandwehr@kde.org>
Date: Thu, 3 Oct 2024 10:10:20 +0200
Subject: [PATCH] Provide option to enable relocatable docbook files on non
 WIN32 platforms

Using relocatable docbook files should only be used when specifically
needed by the build system or by the platform. The known use cases are
- building for WIN32
- building in a cross-building setup where the native system's build
  directy might not exist anymore during target package building (target
  package then has a sysroot of its own but with files being located at
  different locations)
This change provides a RELOCATABLE_DOCBOOK_FILES option that can be
enabled when needed in a certain setup.

SPDX-FileCopyrightText: Andreas Cord-Landwehr <cordlandwehr@kde.org>
SPDX-License-Identifier: MIT

Upstream-Status: Submitted [https://invent.kde.org/frameworks/kdoctools/-/merge_requests/72]
Signed-off-by: Andreas Cord-Landwehr <cordlandwehr@kde.org>
---
 CMakeLists.txt     |  6 ++++++
 src/CMakeLists.txt | 19 ++++++++-----------
 2 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index de7ab89..f7ff535 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,6 +36,12 @@ option(INSTALL_INTERNAL_TOOLS "Install internal tools too." OFF)
 option(BUILD_QCH "Build API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)" OFF)
 add_feature_info(QCH ${BUILD_QCH} "API documentation in QCH format (for e.g. Qt Assistant, Qt Creator & KDevelop)")
 
+option(RELOCATABLE_DOCBOOK_FILES "Generate relative paths to docbook and XSL files (for e.g. Windows and cross-compilation)" OFF)
+if(WIN32)
+    set(RELOCATABLE_DOCBOOK_FILES ON)
+    message(STATUS "Automatic enable RELOCATABLE_DOCBOOK_FILES for Windows platform")
+endif()
+
 # Dependencies
 set(REQUIRED_QT_VERSION 6.5.0)
 find_package(Qt6Core ${REQUIRED_QT_VERSION} REQUIRED NO_MODULE)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2a199da..006ac13 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -6,20 +6,18 @@ set (_custom_dtd_kdex "customization/dtd/kdedbx45.dtd")
 configure_file(${_custom_dtd_kdex}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${_custom_dtd_kdex} )
 # WARNING: this is due to severe limitations on the windows platform to keep the dtd relocatable
 # see the .xsl.cmake files for a more verbose explanation below
-if(NOT WIN32)
+if(NOT RELOCATABLE_DOCBOOK_FILES)
     install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${_custom_dtd_kdex}
         DESTINATION ${KDE_INSTALL_DATADIR_KF}/kdoctools/customization/dtd )
 else()
-    get_filename_component(NORMALIZED_DTD_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/${KDE_INSTALL_DATADIR_KF}/kdoctools/customization/dtd" ABSOLUTE)
     # file(RELATIVE_PATH ...) returns wrong values for paths containing /../ (it doesn't normalize the path)
     # To work around this we make sure the variable passed has all /../ elements
     # removed using get_filename_component(... ABSOLUTE)
+    get_filename_component(NORMALIZED_DTD_INSTALL_PATH "${CMAKE_SYSROOT}/${CMAKE_INSTALL_PREFIX}/${KDE_INSTALL_DATADIR_KF}/kdoctools/customization/dtd" ABSOLUTE)
+    file(RELATIVE_PATH DocBookXML4_DTD_DIR_relative "${NORMALIZED_DTD_INSTALL_PATH}" ${DocBookXML4_DTD_DIR})
+    kdoctools_encode_uri(DocBookXML4_DTD_DIR_relative)
     install(CODE
-        "file(RELATIVE_PATH DocBookXML4_DTD_DIR \"${NORMALIZED_DTD_INSTALL_PATH}\" \"${DocBookXML4_DTD_DIR}\")
-        set(PERL_EXECUTABLE \"${PERL_EXECUTABLE}\")
-        include(\"${CMAKE_SOURCE_DIR}/cmake/uriencode.cmake\")
-        set(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH}\")
-        kdoctools_encode_uri(DocBookXML4_DTD_DIR)
+        "set(DocBookXML4_DTD_DIR \"${DocBookXML4_DTD_DIR_relative}\")
         configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/${_custom_dtd_kdex}.cmake\" \"${CMAKE_CURRENT_BINARY_DIR}/${_custom_dtd_kdex}.install\")"
     )
     get_filename_component(_custom_dtd_kdex_name ${_custom_dtd_kdex} NAME)
@@ -144,20 +142,19 @@ endif()
 # the .xsl with relative paths because these files are not installed while
 # building kdoctools. Instead, we will reconfigure those files at install time
 # with relative paths.
-
 file( GLOB _kdeincludexslt_ALL "customization/kde-include*.xsl.cmake" )
 foreach( _kdeincludexslt ${_kdeincludexslt_ALL} )
     get_filename_component( _kdeincludexslt_name ${_kdeincludexslt} NAME )
     string( REGEX REPLACE ".cmake$" "" _kdeincludexslt_out "${_kdeincludexslt_name}" )
     set( _kdeincludexslt_binarypath "${CMAKE_CURRENT_BINARY_DIR}/customization/${_kdeincludexslt_out}" )
     configure_file( ${_kdeincludexslt} ${_kdeincludexslt_binarypath} )
-    if(NOT WIN32)
+    if(NOT RELOCATABLE_DOCBOOK_FILES)
         install(FILES ${_kdeincludexslt_binarypath}
             DESTINATION ${KDE_INSTALL_DATADIR_KF}/kdoctools/customization )
     else()
         install(CODE
-            "FILE(RELATIVE_PATH DOCBOOKXSL_DIR \${CMAKE_INSTALL_PREFIX}/${KDE_INSTALL_DATADIR_KF}/kdoctools/customization ${DOCBOOKXSL_DIR})
-            CONFIGURE_FILE( \"${_kdeincludexslt}\" \"${_kdeincludexslt_binarypath}.install\" )")
+            "file(RELATIVE_PATH DOCBOOKXSL_DIR ${CMAKE_SYSROOT}/\${CMAKE_INSTALL_PREFIX}/${KDE_INSTALL_DATADIR_KF}/kdoctools/customization ${DOCBOOKXSL_DIR})
+            configure_file( \"${_kdeincludexslt}\" \"${_kdeincludexslt_binarypath}.install\" )")
             install(FILES "${_kdeincludexslt_binarypath}.install" DESTINATION ${KDE_INSTALL_DATADIR_KF}/kdoctools/customization RENAME ${_kdeincludexslt_out})
     endif()
 endforeach( _kdeincludexslt ${_kdeincludexslt_ALL} )
-- 
2.43.0

